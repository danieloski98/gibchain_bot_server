generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id                  String                @id @default(cuid())
    name                String?
    telegram_username   String
    telegram_id         String
    email               String                @unique
    email_verified      Boolean               @default(false)
    phone               String
    referral            String?
    has_paid            Boolean               @default(false)
    createdAt           DateTime              @default(now()) @map(name: "created_at")
    updatedAt           DateTime              @updatedAt @map(name: "updated_at")
    referrals           Referrals[]
    totalWithdrawals    Float                  @default(0.0)
    Widthdrawal_request Widthdrawal_request[]
    Payment             Payment[]
}

model Admin {
    id                  String                @id @default(cuid())
    email               String
    password            String
    fullName            String
    phone               String
    createdAt           DateTime              @default(now()) @map(name: "created_at")
    updatedAt           DateTime              @updatedAt @map(name: "updated_at")
    Widthdrawal_request Widthdrawal_request[]
}

model Widthdrawal_request {
    id             String   @id @default(cuid())
    user_id        String   @unique
    amount         Float
    wallet_address String
    network        String
    approved_by    String?
    approved       Boolean  @default(false)
    createdAt      DateTime @default(now()) @map(name: "created_at")
    updatedAt      DateTime @updatedAt @map(name: "updated_at")

    user  User   @relation(fields: [user_id], references: [id])
    admin Admin? @relation(fields: [approved_by], references: [id])
}

model Referrals {
    id          String  @id @default(cuid())
    User        User?   @relation(fields: [telegram_id], references: [id])
    telegram_id String?
    referredUserId String
}

enum OTP_TYPE {
    VERIFICATION
    WITHDRAWAL
}

model Code {
    id        String   @id @default(cuid())
    user_id   String
    code      Int
    type      OTP_TYPE
    expired   Boolean  @default(false)
    createdAt DateTime @default(now()) @map(name: "created_at")
    updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum PAYMENT_STATUS {
    created
    confirmed
    failed
    delayed
    pending
    resolved
}

model Payment {
    id          String         @id @default(cuid())
    telegram_id String
    payment_id  String
    status      PAYMENT_STATUS @default(created)
    createdAt   DateTime       @default(now()) @map(name: "created_at")
    updatedAt   DateTime       @updatedAt @map(name: "updated_at")

    user User @relation(fields: [telegram_id], references: [id])
}
